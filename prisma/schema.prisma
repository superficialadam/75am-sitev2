// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  accounts Account[]
  sessions Session[]
  
  // Canvas relations
  canvases      Canvas[]
  sharedCanvases CanvasShare[] @relation("SharedCanvases")
  createdShares  CanvasShare[] @relation("CreatedShares")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Canvas persistence models
model Canvas {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  name         String    @db.VarChar(255)
  description  String?
  documentData Json      @map("document_data") // tldraw document snapshot
  sessionData  Json?     @map("session_data")  // tldraw session snapshot
  thumbnailUrl String?   @map("thumbnail_url")
  isPublic     Boolean   @default(false) @map("is_public")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  version      Int       @default(1)

  // Relations
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets CanvasAsset[]
  shares CanvasShare[]

  @@index([userId])
  @@index([updatedAt(sort: Desc)])
  @@map("canvases")
}

model CanvasAsset {
  id        String   @id @default(uuid())
  canvasId  String   @map("canvas_id")
  assetId   String   @map("asset_id") // tldraw asset ID
  r2Key     String   @map("r2_key")   // R2 storage key
  publicUrl String   @map("public_url")
  fileName  String   @map("file_name")
  fileType  String   @map("file_type")
  fileSize  BigInt   @map("file_size")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  canvas Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)

  @@index([canvasId])
  @@map("canvas_assets")
}

enum PermissionLevel {
  VIEW
  EDIT
  ADMIN
}

model CanvasShare {
  id              String          @id @default(uuid())
  canvasId        String          @map("canvas_id")
  userId          String?         @map("user_id")
  permissionLevel PermissionLevel @map("permission_level")
  sharedBy        String          @map("shared_by")
  createdAt       DateTime        @default(now()) @map("created_at")

  // Relations
  canvas    Canvas @relation(fields: [canvasId], references: [id], onDelete: Cascade)
  user      User?  @relation("SharedCanvases", fields: [userId], references: [id], onDelete: Cascade)
  sharedByUser User @relation("CreatedShares", fields: [sharedBy], references: [id])

  @@unique([canvasId, userId])
  @@index([canvasId])
  @@map("canvas_shares")
}
